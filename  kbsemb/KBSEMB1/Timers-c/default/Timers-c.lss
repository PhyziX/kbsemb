
Timers-c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004c  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000130  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000da  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000248  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b5  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  000007c5  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include   	<avr/io.h>
#include 	<avr/iom16.h>
#include 	<avr/interrupt.h>

int main(void) {
  92:	f8 94       	cli
	cli();
	TCCR1A = 0x80;		// Compare ouput mode
  94:	80 e8       	ldi	r24, 0x80	; 128
  96:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x01;		// Counter frequency
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	8e bd       	out	0x2e, r24	; 46
	OCR1AH = 0x01;		// Compare register high
  9c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0x01;		// Compare register low
  9e:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 0x10;		// Set compare flag
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	89 bf       	out	0x39, r24	; 57
	TCNT1H = 0x00;		// Set high counter value to zero
  a4:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;		// Set low counter value to zero
  a6:	1c bc       	out	0x2c, r1	; 44
	sei();
  a8:	78 94       	sei

	forever();
} 

void forever(){
	PORTA = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	fd cf       	rjmp	.-6      	; 0xac <main+0x1a>

000000b2 <forever>:
	sei();

	forever();
} 

void forever(){
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8b bb       	out	0x1b, r24	; 27
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <forever+0x2>

000000ba <motor1>:
		sei					; Enable interrupts
		*/

	}

void motor1(int speed, int direction){
  ba:	9c b5       	in	r25, 0x2c	; 44
        int i = TCNT1L;
		TCNT1L = 0x00; 
  bc:	1c bc       	out	0x2c, r1	; 44
		OCR1AL 	= speed;   		//Load Pulse width - 175
  be:	8a bd       	out	0x2a, r24	; 42
        OCR1AH 	= 0;
  c0:	1b bc       	out	0x2b, r1	; 43
	
		if(direction == 1){
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	71 05       	cpc	r23, r1
  c6:	59 f0       	breq	.+22     	; 0xde <motor1+0x24>
			PORTD = 0x60;		// forward, bit 5 & 6
			DDRD  = 0x60;
			TCNT1L = i;
		}else if(direction == -1){
  c8:	6f 5f       	subi	r22, 0xFF	; 255
  ca:	7f 4f       	sbci	r23, 0xFF	; 255
  cc:	89 f0       	breq	.+34     	; 0xf0 <motor1+0x36>
			PORTD = 0xA0;		// backward, bit 5 & 7
			DDRD = 0xA0;
		}else{
			PORTD = 0xE0;		// brake, bit 5,6 & 7
  ce:	80 ee       	ldi	r24, 0xE0	; 224
  d0:	82 bb       	out	0x12, r24	; 18
			DDRD  = 0xE0;
  d2:	81 bb       	out	0x11, r24	; 17
		}

        TCCR1A 	= 0x81;         //8-bit, Non-Inverted PWM
  d4:	81 e8       	ldi	r24, 0x81	; 129
  d6:	8f bd       	out	0x2f, r24	; 47
        TCCR1B 	= 0x01;         //Start PWM
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	8e bd       	out	0x2e, r24	; 46
		
}
  dc:	08 95       	ret
		TCNT1L = 0x00; 
		OCR1AL 	= speed;   		//Load Pulse width - 175
        OCR1AH 	= 0;
	
		if(direction == 1){
			PORTD = 0x60;		// forward, bit 5 & 6
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	82 bb       	out	0x12, r24	; 18
			DDRD  = 0x60;
  e2:	81 bb       	out	0x11, r24	; 17
			TCNT1L = i;
  e4:	9c bd       	out	0x2c, r25	; 44
		}else{
			PORTD = 0xE0;		// brake, bit 5,6 & 7
			DDRD  = 0xE0;
		}

        TCCR1A 	= 0x81;         //8-bit, Non-Inverted PWM
  e6:	81 e8       	ldi	r24, 0x81	; 129
  e8:	8f bd       	out	0x2f, r24	; 47
        TCCR1B 	= 0x01;         //Start PWM
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	8e bd       	out	0x2e, r24	; 46
		
}
  ee:	08 95       	ret
		if(direction == 1){
			PORTD = 0x60;		// forward, bit 5 & 6
			DDRD  = 0x60;
			TCNT1L = i;
		}else if(direction == -1){
			PORTD = 0xA0;		// backward, bit 5 & 7
  f0:	80 ea       	ldi	r24, 0xA0	; 160
  f2:	82 bb       	out	0x12, r24	; 18
			DDRD = 0xA0;
  f4:	81 bb       	out	0x11, r24	; 17
		}else{
			PORTD = 0xE0;		// brake, bit 5,6 & 7
			DDRD  = 0xE0;
		}

        TCCR1A 	= 0x81;         //8-bit, Non-Inverted PWM
  f6:	81 e8       	ldi	r24, 0x81	; 129
  f8:	8f bd       	out	0x2f, r24	; 47
        TCCR1B 	= 0x01;         //Start PWM
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	8e bd       	out	0x2e, r24	; 46
		
}
  fe:	08 95       	ret

00000100 <__vector_6>:
void forever(){
	PORTA = 0xFF;
	forever();
}
ISR(TIMER1_COMPA_vect)
	{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
		
		motor1(0xAF, 1);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	8f ea       	ldi	r24, 0xAF	; 175
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5d 00 	call	0xba	; 0xba <motor1>
		TCNT1H = 0x00;		// Set high counter value to zero
 12e:	1d bc       	out	0x2d, r1	; 45
		TCNT1L = 0x00;		// Set low counter value to zero
 130:	1c bc       	out	0x2c, r1	; 44
		out TCNT1H, temp	; Set high counter value to zero
		out TCNT1L, temp	; Set low counter value to zero
		sei					; Enable interrupts
		*/

	}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <motor2>:
        TCCR1B 	= 0x01;         //Start PWM
		
}


void motor2(int speed, int direction){
 154:	8a bd       	out	0x2a, r24	; 42
        OCR1AL 	= speed;   		//Load Pulse width - 175
        OCR1AH 	= 0;
 156:	1b bc       	out	0x2b, r1	; 43
		PORTD = 0x08;			// set pwm2
 158:	88 e0       	ldi	r24, 0x08	; 8
 15a:	82 bb       	out	0x12, r24	; 18
		
		if(direction == 1){
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	71 05       	cpc	r23, r1
 160:	59 f0       	breq	.+22     	; 0x178 <motor2+0x24>
			PORTB = 0x01;		// forward, bit 0
			DDRB  = 0x01;
		}else if(direction == -1){
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	81 f0       	breq	.+32     	; 0x188 <motor2+0x34>
			PORTB = 0x02;		// backward, bit 1
			DDRB = 0x02;
		}else{
			PORTB = 0x03;		// brake, bit 0 & 1
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	88 bb       	out	0x18, r24	; 24
			DDRB  = 0x03;
 16c:	87 bb       	out	0x17, r24	; 23
		}

        TCCR1A 	= 0x81;         //8-bit, Non-Inverted PWM
 16e:	81 e8       	ldi	r24, 0x81	; 129
 170:	8f bd       	out	0x2f, r24	; 47
        TCCR1B 	= 0x01;         //Start PWM
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	8e bd       	out	0x2e, r24	; 46
}
 176:	08 95       	ret
        OCR1AL 	= speed;   		//Load Pulse width - 175
        OCR1AH 	= 0;
		PORTD = 0x08;			// set pwm2
		
		if(direction == 1){
			PORTB = 0x01;		// forward, bit 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	88 bb       	out	0x18, r24	; 24
			DDRB  = 0x01;
 17c:	87 bb       	out	0x17, r24	; 23
		}else{
			PORTB = 0x03;		// brake, bit 0 & 1
			DDRB  = 0x03;
		}

        TCCR1A 	= 0x81;         //8-bit, Non-Inverted PWM
 17e:	81 e8       	ldi	r24, 0x81	; 129
 180:	8f bd       	out	0x2f, r24	; 47
        TCCR1B 	= 0x01;         //Start PWM
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	8e bd       	out	0x2e, r24	; 46
}
 186:	08 95       	ret
		
		if(direction == 1){
			PORTB = 0x01;		// forward, bit 0
			DDRB  = 0x01;
		}else if(direction == -1){
			PORTB = 0x02;		// backward, bit 1
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	88 bb       	out	0x18, r24	; 24
			DDRB = 0x02;
 18c:	87 bb       	out	0x17, r24	; 23
		}else{
			PORTB = 0x03;		// brake, bit 0 & 1
			DDRB  = 0x03;
		}

        TCCR1A 	= 0x81;         //8-bit, Non-Inverted PWM
 18e:	81 e8       	ldi	r24, 0x81	; 129
 190:	8f bd       	out	0x2f, r24	; 47
        TCCR1B 	= 0x01;         //Start PWM
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	8e bd       	out	0x2e, r24	; 46
}
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
