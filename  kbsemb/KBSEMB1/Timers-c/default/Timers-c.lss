
Timers-c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002a6  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800064  000002aa  0000031e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000008b  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001d9  00000000  00000000  000003c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000eb  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a8  00000000  00000000  0000068d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000dd  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  00000a85  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_3>
  10:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  8a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <forever>:

	forever(); 					// Goto an endless loop
} 

/* Start an endless loop  */
void forever(){
  92:	20 91 62 00 	lds	r18, 0x0062
  96:	30 91 63 00 	lds	r19, 0x0063
	// if PB2 is pushed, start the motors or reverse
	if(bit_is_set(PINB, 2)){
		while(bit_is_set(PINB, 2)){}	// Start if button is released
		if(((direction1 == -1) && (direction2 == -1)) || ((direction1 == 0) && (direction2 == 0))){
			direction1 = 1;				// motor1 forward
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	70 e0       	ldi	r23, 0x00	; 0
			direction2 = 1;				// motor2 forward
		}else{
			direction1 = -1;			// motor1 backward
  9e:	4f ef       	ldi	r20, 0xFF	; 255
  a0:	5f ef       	ldi	r21, 0xFF	; 255
} 

/* Start an endless loop  */
void forever(){
	// if PB2 is pushed, start the motors or reverse
	if(bit_is_set(PINB, 2)){
  a2:	b2 9b       	sbis	0x16, 2	; 22
  a4:	2e c0       	rjmp	.+92     	; 0x102 <forever+0x70>
		while(bit_is_set(PINB, 2)){}	// Start if button is released
  a6:	b2 99       	sbic	0x16, 2	; 22
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <forever+0x14>
		if(((direction1 == -1) && (direction2 == -1)) || ((direction1 == 0) && (direction2 == 0))){
  aa:	80 91 64 00 	lds	r24, 0x0064
  ae:	90 91 65 00 	lds	r25, 0x0065
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	9f 4f       	sbci	r25, 0xFF	; 255
  b6:	39 f4       	brne	.+14     	; 0xc6 <forever+0x34>
  b8:	80 91 66 00 	lds	r24, 0x0066
  bc:	90 91 67 00 	lds	r25, 0x0067
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	9f 4f       	sbci	r25, 0xFF	; 255
  c4:	61 f0       	breq	.+24     	; 0xde <forever+0x4c>
  c6:	80 91 64 00 	lds	r24, 0x0064
  ca:	90 91 65 00 	lds	r25, 0x0065
  ce:	89 2b       	or	r24, r25
  d0:	79 f4       	brne	.+30     	; 0xf0 <forever+0x5e>
  d2:	80 91 66 00 	lds	r24, 0x0066
  d6:	90 91 67 00 	lds	r25, 0x0067
  da:	89 2b       	or	r24, r25
  dc:	49 f4       	brne	.+18     	; 0xf0 <forever+0x5e>
			direction1 = 1;				// motor1 forward
  de:	70 93 65 00 	sts	0x0065, r23
  e2:	60 93 64 00 	sts	0x0064, r22
			direction2 = 1;				// motor2 forward
  e6:	70 93 67 00 	sts	0x0067, r23
  ea:	60 93 66 00 	sts	0x0066, r22
  ee:	d9 cf       	rjmp	.-78     	; 0xa2 <forever+0x10>
		}else{
			direction1 = -1;			// motor1 backward
  f0:	50 93 65 00 	sts	0x0065, r21
  f4:	40 93 64 00 	sts	0x0064, r20
			direction2 = -1;			// motor2 backward
  f8:	50 93 67 00 	sts	0x0067, r21
  fc:	40 93 66 00 	sts	0x0066, r20
 100:	d0 cf       	rjmp	.-96     	; 0xa2 <forever+0x10>
		}
	// if PB3 is pushed, increase or decrease speed.
	}else if(bit_is_set(PINB, 3)){
 102:	b3 9b       	sbis	0x16, 3	; 22
 104:	3b c0       	rjmp	.+118    	; 0x17c <forever+0xea>
		while(bit_is_set(PINB, 3)){}	// Start if button is released
 106:	b3 99       	sbic	0x16, 3	; 22
 108:	fe cf       	rjmp	.-4      	; 0x106 <forever+0x74>
		if(up == 1){					// If direction is up:
 10a:	21 30       	cpi	r18, 0x01	; 1
 10c:	31 05       	cpc	r19, r1
 10e:	c9 f4       	brne	.+50     	; 0x142 <forever+0xb0>
			if(mSpeed <= 0xAF){			// If speed <= 175 
 110:	80 91 60 00 	lds	r24, 0x0060
 114:	90 91 61 00 	lds	r25, 0x0061
 118:	80 3b       	cpi	r24, 0xB0	; 176
 11a:	91 05       	cpc	r25, r1
 11c:	34 f4       	brge	.+12     	; 0x12a <forever+0x98>
				mSpeed = mSpeed + 0x05;	// Increase speed with 5
 11e:	80 91 60 00 	lds	r24, 0x0060
 122:	90 91 61 00 	lds	r25, 0x0061
 126:	05 96       	adiw	r24, 0x05	; 5
 128:	18 c0       	rjmp	.+48     	; 0x15a <forever+0xc8>
			}else{						// Else
				up = 0;					// The next time counting down
				mSpeed = mSpeed - 0x05;	// Decrease speed with 5
 12a:	80 91 60 00 	lds	r24, 0x0060
 12e:	90 91 61 00 	lds	r25, 0x0061
 132:	05 97       	sbiw	r24, 0x05	; 5
 134:	90 93 61 00 	sts	0x0061, r25
 138:	80 93 60 00 	sts	0x0060, r24
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	b0 cf       	rjmp	.-160    	; 0xa2 <forever+0x10>
			}
		}else{
			if(mSpeed >= 0x91){			// If speed >= 145 
 142:	80 91 60 00 	lds	r24, 0x0060
 146:	90 91 61 00 	lds	r25, 0x0061
 14a:	81 39       	cpi	r24, 0x91	; 145
 14c:	91 05       	cpc	r25, r1
 14e:	54 f0       	brlt	.+20     	; 0x164 <forever+0xd2>
				mSpeed = mSpeed - 0x05;	// Decrease speed with 5
 150:	80 91 60 00 	lds	r24, 0x0060
 154:	90 91 61 00 	lds	r25, 0x0061
 158:	05 97       	sbiw	r24, 0x05	; 5
 15a:	90 93 61 00 	sts	0x0061, r25
 15e:	80 93 60 00 	sts	0x0060, r24
 162:	9f cf       	rjmp	.-194    	; 0xa2 <forever+0x10>
			}else{						// Else
				up = 1;					// The next time counting up
				mSpeed = mSpeed + 0x05;	// Increase speed with 5
 164:	80 91 60 00 	lds	r24, 0x0060
 168:	90 91 61 00 	lds	r25, 0x0061
 16c:	05 96       	adiw	r24, 0x05	; 5
 16e:	90 93 61 00 	sts	0x0061, r25
 172:	80 93 60 00 	sts	0x0060, r24
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	93 cf       	rjmp	.-218    	; 0xa2 <forever+0x10>
			}
		
		}
	// if PB4 is pushed, stop the motors
	}else if(bit_is_set(PINB, 4)){		
 17c:	b4 9b       	sbis	0x16, 4	; 22
 17e:	91 cf       	rjmp	.-222    	; 0xa2 <forever+0x10>
		direction1 = 0;					// Change direction in 0
 180:	10 92 65 00 	sts	0x0065, r1
 184:	10 92 64 00 	sts	0x0064, r1
		direction2 = 0;					// Change direction in 0
 188:	10 92 67 00 	sts	0x0067, r1
 18c:	10 92 66 00 	sts	0x0066, r1
 190:	88 cf       	rjmp	.-240    	; 0xa2 <forever+0x10>

00000192 <main>:
int up = 1;						// motorspeed up / down counter
volatile int direction1 = 0;	// motor1: 0 = not running, 1 = forward, -1 = break
volatile int direction2 = 0;	// motor2: 0 = not running, 1 = forward, -1 = break

/* Initialize variables for interrupt */
int main(void) {
 192:	f8 94       	cli
	
	cli();
	// Set values for timer/counter2 interrupt
		TCCR2 = 0x02;			// COM20 & CS21
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	85 bd       	out	0x25, r24	; 37
		OCR2 = 0xFC;			// fc Output compare 
 198:	8c ef       	ldi	r24, 0xFC	; 252
 19a:	83 bd       	out	0x23, r24	; 35
		TIMSK = 0xC0;			// Set compare flag, overflow & compare
 19c:	80 ec       	ldi	r24, 0xC0	; 192
 19e:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0xF8;			// Reset counter
 1a0:	88 ef       	ldi	r24, 0xF8	; 248
 1a2:	84 bd       	out	0x24, r24	; 36
	
	// Set values for timer/counter1 (motors)
		TCCR1A = 0xA1;			// Set COM1A1, COM1B1 & WGM10
 1a4:	81 ea       	ldi	r24, 0xA1	; 161
 1a6:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = 0x01;			// CS10
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	8e bd       	out	0x2e, r24	; 46

	// Set PWM signal for motors
		PORTD = 0x34;			// Set PWM1 & PWM2 signal
 1ac:	84 e3       	ldi	r24, 0x34	; 52
 1ae:	82 bb       	out	0x12, r24	; 18
		DDRD = 0x34;			// Set PWM1 & PWM2 signal
 1b0:	81 bb       	out	0x11, r24	; 17

	// Onboard leds off
		DDRB = 0xFF;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	87 bb       	out	0x17, r24	; 23
	sei();
 1b6:	78 94       	sei

	forever(); 					// Goto an endless loop
 1b8:	0e 94 49 00 	call	0x92	; 0x92 <forever>
} 
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	08 95       	ret

000001c2 <__vector_4>:

	forever();							// Start an endless loop
}

// Interrupt routine: Overflow
ISR(TIMER2_OVF_vect){					
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
	motor1(mSpeed, direction1);			// Start motor1
 1d4:	20 91 64 00 	lds	r18, 0x0064
 1d8:	30 91 65 00 	lds	r19, 0x0065
 1dc:	80 91 60 00 	lds	r24, 0x0060
 1e0:	90 91 61 00 	lds	r25, 0x0061
	motor2(mSpeed, direction2);			// Start motor2
}


void motor1(int speed, int direction){
		OCR1AL = speed;					// Save speed in OCR1AL
 1e4:	8a bd       	out	0x2a, r24	; 42
		OCR1AH = 0; 
 1e6:	1b bc       	out	0x2b, r1	; 43
		
		if(direction == 1){				// If forward
 1e8:	21 30       	cpi	r18, 0x01	; 1
 1ea:	31 05       	cpc	r19, r1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <__vector_4+0x30>
			PORTD = 0x70;				// PWM1,PWM2 & Forward bit
 1ee:	80 e7       	ldi	r24, 0x70	; 112
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <__vector_4+0x3c>
		}else if(direction == -1){		// If backward
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	3f 4f       	sbci	r19, 0xFF	; 255
 1f6:	11 f4       	brne	.+4      	; 0x1fc <__vector_4+0x3a>
			PORTD = 0xB0;				// PWM1,PWM2 & Backward bit
 1f8:	80 eb       	ldi	r24, 0xB0	; 176
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <__vector_4+0x3c>
		}else{							// Else, stop
			PORTD = 0xF0;				// PWM1,PWM2 & Forward & backward bit
 1fc:	80 ef       	ldi	r24, 0xF0	; 240
 1fe:	82 bb       	out	0x12, r24	; 18
}

// Interrupt routine: Overflow
ISR(TIMER2_OVF_vect){					
	motor1(mSpeed, direction1);			// Start motor1
	TCNT2 = 0xF8;						// Set counter value 
 200:	88 ef       	ldi	r24, 0xF8	; 248
 202:	84 bd       	out	0x24, r24	; 36
}
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <__vector_3>:

// Interrupt routine: Compare
ISR(TIMER2_COMP_vect){
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
	motor2(mSpeed, direction2);			// Start motor2
 228:	20 91 66 00 	lds	r18, 0x0066
 22c:	30 91 67 00 	lds	r19, 0x0067
 230:	80 91 60 00 	lds	r24, 0x0060
 234:	90 91 61 00 	lds	r25, 0x0061
			PORTD = 0xF0;				// PWM1,PWM2 & Forward & backward bit
		} 
}

void motor2(int speed, int direction){
		OCR1BL = speed;					// Save speed in OCR1BL
 238:	88 bd       	out	0x28, r24	; 40
		OCR1BH = 0; 
 23a:	19 bc       	out	0x29, r1	; 41
	
		if(direction == 1){				// If forward
 23c:	21 30       	cpi	r18, 0x01	; 1
 23e:	31 05       	cpc	r19, r1
 240:	11 f4       	brne	.+4      	; 0x246 <__vector_3+0x30>
			PORTB = 0x02;				// Forward bit
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	06 c0       	rjmp	.+12     	; 0x252 <__vector_3+0x3c>
		}else if(direction == -1){		// If backward
 246:	2f 5f       	subi	r18, 0xFF	; 255
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	11 f4       	brne	.+4      	; 0x250 <__vector_3+0x3a>
			PORTB = 0x01;				// Backward bit
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	01 c0       	rjmp	.+2      	; 0x252 <__vector_3+0x3c>
		}else{							// Else, stop
			PORTB = 0x03;				// Forward & backward bit
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	88 bb       	out	0x18, r24	; 24
}

// Interrupt routine: Compare
ISR(TIMER2_COMP_vect){
	motor2(mSpeed, direction2);			// Start motor2
}
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <motor1>:


void motor1(int speed, int direction){
 266:	8a bd       	out	0x2a, r24	; 42
		OCR1AL = speed;					// Save speed in OCR1AL
		OCR1AH = 0; 
 268:	1b bc       	out	0x2b, r1	; 43
		
		if(direction == 1){				// If forward
 26a:	61 30       	cpi	r22, 0x01	; 1
 26c:	71 05       	cpc	r23, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <motor1+0xe>
			PORTD = 0x70;				// PWM1,PWM2 & Forward bit
 270:	80 e7       	ldi	r24, 0x70	; 112
 272:	06 c0       	rjmp	.+12     	; 0x280 <motor1+0x1a>
		}else if(direction == -1){		// If backward
 274:	6f 5f       	subi	r22, 0xFF	; 255
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	11 f4       	brne	.+4      	; 0x27e <motor1+0x18>
			PORTD = 0xB0;				// PWM1,PWM2 & Backward bit
 27a:	80 eb       	ldi	r24, 0xB0	; 176
 27c:	01 c0       	rjmp	.+2      	; 0x280 <motor1+0x1a>
		}else{							// Else, stop
			PORTD = 0xF0;				// PWM1,PWM2 & Forward & backward bit
 27e:	80 ef       	ldi	r24, 0xF0	; 240
 280:	82 bb       	out	0x12, r24	; 18
 282:	08 95       	ret

00000284 <motor2>:
		} 
}

void motor2(int speed, int direction){
 284:	88 bd       	out	0x28, r24	; 40
		OCR1BL = speed;					// Save speed in OCR1BL
		OCR1BH = 0; 
 286:	19 bc       	out	0x29, r1	; 41
	
		if(direction == 1){				// If forward
 288:	61 30       	cpi	r22, 0x01	; 1
 28a:	71 05       	cpc	r23, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <motor2+0xe>
			PORTB = 0x02;				// Forward bit
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	06 c0       	rjmp	.+12     	; 0x29e <motor2+0x1a>
		}else if(direction == -1){		// If backward
 292:	6f 5f       	subi	r22, 0xFF	; 255
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	11 f4       	brne	.+4      	; 0x29c <motor2+0x18>
			PORTB = 0x01;				// Backward bit
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	01 c0       	rjmp	.+2      	; 0x29e <motor2+0x1a>
		}else{							// Else, stop
			PORTB = 0x03;				// Forward & backward bit
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	88 bb       	out	0x18, r24	; 24
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
