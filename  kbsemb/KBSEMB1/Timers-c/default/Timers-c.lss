
Timers-c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002ca  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800064  000002ce  00000342  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000094  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000206  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e2  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_3>
  10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  8a:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:

	forever(); 					// Goto an endless loop
} 

/* Initialze registers */
void init(){
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	85 bd       	out	0x25, r24	; 37
	// Set values for timer/counter2 interrupt
		TCCR2 = 0x02;			// COM20 & CS21
		OCR2 = 0xFC;			// fc Output compare 
  96:	8c ef       	ldi	r24, 0xFC	; 252
  98:	83 bd       	out	0x23, r24	; 35
		TIMSK = 0xC0;			// Set compare flag, overflow & compare
  9a:	80 ec       	ldi	r24, 0xC0	; 192
  9c:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0xF8;			// Reset counter
  9e:	88 ef       	ldi	r24, 0xF8	; 248
  a0:	84 bd       	out	0x24, r24	; 36
	
	// Set values for timer/counter1 (motors)
		TCCR1A = 0xA1;			// Set COM1A1, COM1B1 & WGM10
  a2:	81 ea       	ldi	r24, 0xA1	; 161
  a4:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = 0x01;			// CS10
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	8e bd       	out	0x2e, r24	; 46

	// Set PWM signal for motors
		PORTD = 0x34;			// Set PWM1 & PWM2 signal
  aa:	84 e3       	ldi	r24, 0x34	; 52
  ac:	82 bb       	out	0x12, r24	; 18
		DDRD = 0x34;			// Set PWM1 & PWM2 signal
  ae:	81 bb       	out	0x11, r24	; 17

	// Onboard leds off
		DDRB = 0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	87 bb       	out	0x17, r24	; 23
}
  b4:	08 95       	ret

000000b6 <forever>:
/* Start an endless loop  */
void forever(){
  b6:	20 91 62 00 	lds	r18, 0x0062
  ba:	30 91 63 00 	lds	r19, 0x0063
	// if PB2 is pushed, start the motors or reverse
	if(bit_is_set(PINB, 2)){
		while(bit_is_set(PINB, 2)){}	// Start if button is released
		if(((direction1 == -1) && (direction2 == -1)) || ((direction1 == 0) && (direction2 == 0))){
			direction1 = 1;				// motor1 forward
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	70 e0       	ldi	r23, 0x00	; 0
			direction2 = 1;				// motor2 forward
		}else{
			direction1 = -1;			// motor1 backward
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	5f ef       	ldi	r21, 0xFF	; 255
		DDRB = 0xFF;
}
/* Start an endless loop  */
void forever(){
	// if PB2 is pushed, start the motors or reverse
	if(bit_is_set(PINB, 2)){
  c6:	b2 9b       	sbis	0x16, 2	; 22
  c8:	2e c0       	rjmp	.+92     	; 0x126 <forever+0x70>
		while(bit_is_set(PINB, 2)){}	// Start if button is released
  ca:	b2 99       	sbic	0x16, 2	; 22
  cc:	fe cf       	rjmp	.-4      	; 0xca <forever+0x14>
		if(((direction1 == -1) && (direction2 == -1)) || ((direction1 == 0) && (direction2 == 0))){
  ce:	80 91 64 00 	lds	r24, 0x0064
  d2:	90 91 65 00 	lds	r25, 0x0065
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	9f 4f       	sbci	r25, 0xFF	; 255
  da:	39 f4       	brne	.+14     	; 0xea <forever+0x34>
  dc:	80 91 66 00 	lds	r24, 0x0066
  e0:	90 91 67 00 	lds	r25, 0x0067
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	61 f0       	breq	.+24     	; 0x102 <forever+0x4c>
  ea:	80 91 64 00 	lds	r24, 0x0064
  ee:	90 91 65 00 	lds	r25, 0x0065
  f2:	89 2b       	or	r24, r25
  f4:	79 f4       	brne	.+30     	; 0x114 <forever+0x5e>
  f6:	80 91 66 00 	lds	r24, 0x0066
  fa:	90 91 67 00 	lds	r25, 0x0067
  fe:	89 2b       	or	r24, r25
 100:	49 f4       	brne	.+18     	; 0x114 <forever+0x5e>
			direction1 = 1;				// motor1 forward
 102:	70 93 65 00 	sts	0x0065, r23
 106:	60 93 64 00 	sts	0x0064, r22
			direction2 = 1;				// motor2 forward
 10a:	70 93 67 00 	sts	0x0067, r23
 10e:	60 93 66 00 	sts	0x0066, r22
 112:	d9 cf       	rjmp	.-78     	; 0xc6 <forever+0x10>
		}else{
			direction1 = -1;			// motor1 backward
 114:	50 93 65 00 	sts	0x0065, r21
 118:	40 93 64 00 	sts	0x0064, r20
			direction2 = -1;			// motor2 backward
 11c:	50 93 67 00 	sts	0x0067, r21
 120:	40 93 66 00 	sts	0x0066, r20
 124:	d0 cf       	rjmp	.-96     	; 0xc6 <forever+0x10>
		}
	// if PB3 is pushed, increase or decrease speed.
	}else if(bit_is_set(PINB, 3)){
 126:	b3 9b       	sbis	0x16, 3	; 22
 128:	3b c0       	rjmp	.+118    	; 0x1a0 <forever+0xea>
		while(bit_is_set(PINB, 3)){}	// Start if button is released
 12a:	b3 99       	sbic	0x16, 3	; 22
 12c:	fe cf       	rjmp	.-4      	; 0x12a <forever+0x74>
		if(up == 1){					// If direction is up:
 12e:	21 30       	cpi	r18, 0x01	; 1
 130:	31 05       	cpc	r19, r1
 132:	c9 f4       	brne	.+50     	; 0x166 <forever+0xb0>
			if(mSpeed <= 0xAF){			// If speed <= 175 
 134:	80 91 60 00 	lds	r24, 0x0060
 138:	90 91 61 00 	lds	r25, 0x0061
 13c:	80 3b       	cpi	r24, 0xB0	; 176
 13e:	91 05       	cpc	r25, r1
 140:	34 f4       	brge	.+12     	; 0x14e <forever+0x98>
				mSpeed = mSpeed + 0x05;	// Increase speed with 5
 142:	80 91 60 00 	lds	r24, 0x0060
 146:	90 91 61 00 	lds	r25, 0x0061
 14a:	05 96       	adiw	r24, 0x05	; 5
 14c:	18 c0       	rjmp	.+48     	; 0x17e <forever+0xc8>
			}else{						// Else
				up = 0;					// The next time counting down
				mSpeed = mSpeed - 0x05;	// Decrease speed with 5
 14e:	80 91 60 00 	lds	r24, 0x0060
 152:	90 91 61 00 	lds	r25, 0x0061
 156:	05 97       	sbiw	r24, 0x05	; 5
 158:	90 93 61 00 	sts	0x0061, r25
 15c:	80 93 60 00 	sts	0x0060, r24
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	b0 cf       	rjmp	.-160    	; 0xc6 <forever+0x10>
			}
		}else{
			if(mSpeed >= 0x91){			// If speed >= 145 
 166:	80 91 60 00 	lds	r24, 0x0060
 16a:	90 91 61 00 	lds	r25, 0x0061
 16e:	81 39       	cpi	r24, 0x91	; 145
 170:	91 05       	cpc	r25, r1
 172:	54 f0       	brlt	.+20     	; 0x188 <forever+0xd2>
				mSpeed = mSpeed - 0x05;	// Decrease speed with 5
 174:	80 91 60 00 	lds	r24, 0x0060
 178:	90 91 61 00 	lds	r25, 0x0061
 17c:	05 97       	sbiw	r24, 0x05	; 5
 17e:	90 93 61 00 	sts	0x0061, r25
 182:	80 93 60 00 	sts	0x0060, r24
 186:	9f cf       	rjmp	.-194    	; 0xc6 <forever+0x10>
			}else{						// Else
				up = 1;					// The next time counting up
				mSpeed = mSpeed + 0x05;	// Increase speed with 5
 188:	80 91 60 00 	lds	r24, 0x0060
 18c:	90 91 61 00 	lds	r25, 0x0061
 190:	05 96       	adiw	r24, 0x05	; 5
 192:	90 93 61 00 	sts	0x0061, r25
 196:	80 93 60 00 	sts	0x0060, r24
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	93 cf       	rjmp	.-218    	; 0xc6 <forever+0x10>
			}
		
		}
	// if PB4 is pushed, stop the motors
	}else if(bit_is_set(PINB, 4)){		
 1a0:	b4 9b       	sbis	0x16, 4	; 22
 1a2:	91 cf       	rjmp	.-222    	; 0xc6 <forever+0x10>
		direction1 = 0;					// Change direction in 0
 1a4:	10 92 65 00 	sts	0x0065, r1
 1a8:	10 92 64 00 	sts	0x0064, r1
		direction2 = 0;					// Change direction in 0
 1ac:	10 92 67 00 	sts	0x0067, r1
 1b0:	10 92 66 00 	sts	0x0066, r1
 1b4:	88 cf       	rjmp	.-240    	; 0xc6 <forever+0x10>

000001b6 <main>:
int up = 1;						// motorspeed up / down counter
volatile int direction1 = 0;	// motor1: 0 = not running, 1 = forward, -1 = break
volatile int direction2 = 0;	// motor2: 0 = not running, 1 = forward, -1 = break

/* Initialize variables for interrupt */
int main(void) {
 1b6:	f8 94       	cli
} 

/* Initialze registers */
void init(){
	// Set values for timer/counter2 interrupt
		TCCR2 = 0x02;			// COM20 & CS21
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	85 bd       	out	0x25, r24	; 37
		OCR2 = 0xFC;			// fc Output compare 
 1bc:	8c ef       	ldi	r24, 0xFC	; 252
 1be:	83 bd       	out	0x23, r24	; 35
		TIMSK = 0xC0;			// Set compare flag, overflow & compare
 1c0:	80 ec       	ldi	r24, 0xC0	; 192
 1c2:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0xF8;			// Reset counter
 1c4:	88 ef       	ldi	r24, 0xF8	; 248
 1c6:	84 bd       	out	0x24, r24	; 36
	
	// Set values for timer/counter1 (motors)
		TCCR1A = 0xA1;			// Set COM1A1, COM1B1 & WGM10
 1c8:	81 ea       	ldi	r24, 0xA1	; 161
 1ca:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = 0x01;			// CS10
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	8e bd       	out	0x2e, r24	; 46

	// Set PWM signal for motors
		PORTD = 0x34;			// Set PWM1 & PWM2 signal
 1d0:	84 e3       	ldi	r24, 0x34	; 52
 1d2:	82 bb       	out	0x12, r24	; 18
		DDRD = 0x34;			// Set PWM1 & PWM2 signal
 1d4:	81 bb       	out	0x11, r24	; 17

	// Onboard leds off
		DDRB = 0xFF;
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	87 bb       	out	0x17, r24	; 23
/* Initialize variables for interrupt */
int main(void) {
	
	cli();						// Disable interrupts
	init();						// Initialze registers
	sei();						// Enable interrupts
 1da:	78 94       	sei

	forever(); 					// Goto an endless loop
 1dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <forever>
} 
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	08 95       	ret

000001e6 <__vector_4>:

	forever();							// Start an endless loop
}

// Interrupt routine: Overflow
ISR(TIMER2_OVF_vect){					
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
	motor1(mSpeed, direction1);			// Start motor1
 1f8:	20 91 64 00 	lds	r18, 0x0064
 1fc:	30 91 65 00 	lds	r19, 0x0065
 200:	80 91 60 00 	lds	r24, 0x0060
 204:	90 91 61 00 	lds	r25, 0x0061
	motor2(mSpeed, direction2);			// Start motor2
}


void motor1(int speed, int direction){
		OCR1AL = speed;					// Save speed in OCR1AL
 208:	8a bd       	out	0x2a, r24	; 42
		OCR1AH = 0; 
 20a:	1b bc       	out	0x2b, r1	; 43
		
		if(direction == 1){				// If forward
 20c:	21 30       	cpi	r18, 0x01	; 1
 20e:	31 05       	cpc	r19, r1
 210:	11 f4       	brne	.+4      	; 0x216 <__vector_4+0x30>
			PORTD = 0x70;				// PWM1,PWM2 & Forward bit
 212:	80 e7       	ldi	r24, 0x70	; 112
 214:	06 c0       	rjmp	.+12     	; 0x222 <__vector_4+0x3c>
		}else if(direction == -1){		// If backward
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	11 f4       	brne	.+4      	; 0x220 <__vector_4+0x3a>
			PORTD = 0xB0;				// PWM1,PWM2 & Backward bit
 21c:	80 eb       	ldi	r24, 0xB0	; 176
 21e:	01 c0       	rjmp	.+2      	; 0x222 <__vector_4+0x3c>
		}else{							// Else, stop
			PORTD = 0xF0;				// PWM1,PWM2 & Forward & backward bit
 220:	80 ef       	ldi	r24, 0xF0	; 240
 222:	82 bb       	out	0x12, r24	; 18
}

// Interrupt routine: Overflow
ISR(TIMER2_OVF_vect){					
	motor1(mSpeed, direction1);			// Start motor1
	TCNT2 = 0xF8;						// Set counter value 
 224:	88 ef       	ldi	r24, 0xF8	; 248
 226:	84 bd       	out	0x24, r24	; 36
}
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_3>:

// Interrupt routine: Compare
ISR(TIMER2_COMP_vect){
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
	motor2(mSpeed, direction2);			// Start motor2
 24c:	20 91 66 00 	lds	r18, 0x0066
 250:	30 91 67 00 	lds	r19, 0x0067
 254:	80 91 60 00 	lds	r24, 0x0060
 258:	90 91 61 00 	lds	r25, 0x0061
			PORTD = 0xF0;				// PWM1,PWM2 & Forward & backward bit
		} 
}

void motor2(int speed, int direction){
		OCR1BL = speed;					// Save speed in OCR1BL
 25c:	88 bd       	out	0x28, r24	; 40
		OCR1BH = 0; 
 25e:	19 bc       	out	0x29, r1	; 41
	
		if(direction == 1){				// If forward
 260:	21 30       	cpi	r18, 0x01	; 1
 262:	31 05       	cpc	r19, r1
 264:	11 f4       	brne	.+4      	; 0x26a <__vector_3+0x30>
			PORTB = 0x02;				// Forward bit
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	06 c0       	rjmp	.+12     	; 0x276 <__vector_3+0x3c>
		}else if(direction == -1){		// If backward
 26a:	2f 5f       	subi	r18, 0xFF	; 255
 26c:	3f 4f       	sbci	r19, 0xFF	; 255
 26e:	11 f4       	brne	.+4      	; 0x274 <__vector_3+0x3a>
			PORTB = 0x01;				// Backward bit
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	01 c0       	rjmp	.+2      	; 0x276 <__vector_3+0x3c>
		}else{							// Else, stop
			PORTB = 0x03;				// Forward & backward bit
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	88 bb       	out	0x18, r24	; 24
}

// Interrupt routine: Compare
ISR(TIMER2_COMP_vect){
	motor2(mSpeed, direction2);			// Start motor2
}
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <motor1>:


void motor1(int speed, int direction){
 28a:	8a bd       	out	0x2a, r24	; 42
		OCR1AL = speed;					// Save speed in OCR1AL
		OCR1AH = 0; 
 28c:	1b bc       	out	0x2b, r1	; 43
		
		if(direction == 1){				// If forward
 28e:	61 30       	cpi	r22, 0x01	; 1
 290:	71 05       	cpc	r23, r1
 292:	11 f4       	brne	.+4      	; 0x298 <motor1+0xe>
			PORTD = 0x70;				// PWM1,PWM2 & Forward bit
 294:	80 e7       	ldi	r24, 0x70	; 112
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <motor1+0x1a>
		}else if(direction == -1){		// If backward
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	11 f4       	brne	.+4      	; 0x2a2 <motor1+0x18>
			PORTD = 0xB0;				// PWM1,PWM2 & Backward bit
 29e:	80 eb       	ldi	r24, 0xB0	; 176
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <motor1+0x1a>
		}else{							// Else, stop
			PORTD = 0xF0;				// PWM1,PWM2 & Forward & backward bit
 2a2:	80 ef       	ldi	r24, 0xF0	; 240
 2a4:	82 bb       	out	0x12, r24	; 18
 2a6:	08 95       	ret

000002a8 <motor2>:
		} 
}

void motor2(int speed, int direction){
 2a8:	88 bd       	out	0x28, r24	; 40
		OCR1BL = speed;					// Save speed in OCR1BL
		OCR1BH = 0; 
 2aa:	19 bc       	out	0x29, r1	; 41
	
		if(direction == 1){				// If forward
 2ac:	61 30       	cpi	r22, 0x01	; 1
 2ae:	71 05       	cpc	r23, r1
 2b0:	11 f4       	brne	.+4      	; 0x2b6 <motor2+0xe>
			PORTB = 0x02;				// Forward bit
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <motor2+0x1a>
		}else if(direction == -1){		// If backward
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <motor2+0x18>
			PORTB = 0x01;				// Backward bit
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <motor2+0x1a>
		}else{							// Else, stop
			PORTB = 0x03;				// Forward & backward bit
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	88 bb       	out	0x18, r24	; 24
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
