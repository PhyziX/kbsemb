
Timers-c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000031  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ea  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000076  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000134  00000000  00000000  00000309  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a2  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motor1>:
	}

} 


void motor1(int speed, int direction){
  92:	8a bd       	out	0x2a, r24	; 42
        OCR1AL 	= speed;   		//Load Pulse width - 175
        OCR1AH 	= 0;
  94:	1b bc       	out	0x2b, r1	; 43
	
		if(direction == 1){
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	71 05       	cpc	r23, r1
  9a:	11 f4       	brne	.+4      	; 0xa0 <motor1+0xe>
			PORTD = 0x60;		// forward, bit 5 & 6
  9c:	80 e6       	ldi	r24, 0x60	; 96
  9e:	06 c0       	rjmp	.+12     	; 0xac <motor1+0x1a>
			DDRD  = 0x60;
		}else if(direction == -1){
  a0:	6f 5f       	subi	r22, 0xFF	; 255
  a2:	7f 4f       	sbci	r23, 0xFF	; 255
  a4:	11 f4       	brne	.+4      	; 0xaa <motor1+0x18>
			PORTD = 0xA0;		// backward, bit 5 & 7
  a6:	80 ea       	ldi	r24, 0xA0	; 160
  a8:	01 c0       	rjmp	.+2      	; 0xac <motor1+0x1a>
			DDRD = 0xA0;
		}else{
			PORTD = 0xE0;		// brake, bit 5,6 & 7
  aa:	80 ee       	ldi	r24, 0xE0	; 224
  ac:	82 bb       	out	0x12, r24	; 18
			DDRD  = 0xE0;
  ae:	81 bb       	out	0x11, r24	; 17
		}

        TCCR1A 	= 0x81;         //8-bit, Non-Inverted PWM
  b0:	81 e8       	ldi	r24, 0x81	; 129
  b2:	8f bd       	out	0x2f, r24	; 47
        TCCR1B 	= 0x01;         //Start PWM
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	8e bd       	out	0x2e, r24	; 46
}
  b8:	08 95       	ret

000000ba <motor2>:


void motor2(int speed, int direction){
  ba:	8a bd       	out	0x2a, r24	; 42
        OCR1AL 	= speed;   		//Load Pulse width - 175
        OCR1AH 	= 0;
  bc:	1b bc       	out	0x2b, r1	; 43
		PORTD = 0x08;			// set pwm2
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	82 bb       	out	0x12, r24	; 18
		
		if(direction == 1){
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	71 05       	cpc	r23, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <motor2+0x12>
			PORTB = 0x01;		// forward, bit 0
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	06 c0       	rjmp	.+12     	; 0xd8 <motor2+0x1e>
			DDRB  = 0x01;
		}else if(direction == -1){
  cc:	6f 5f       	subi	r22, 0xFF	; 255
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
  d0:	11 f4       	brne	.+4      	; 0xd6 <motor2+0x1c>
			PORTB = 0x02;		// backward, bit 1
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <motor2+0x1e>
			DDRB = 0x02;
		}else{
			PORTB = 0x03;		// brake, bit 0 & 1
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	88 bb       	out	0x18, r24	; 24
			DDRB  = 0x03;
  da:	87 bb       	out	0x17, r24	; 23
		}

        TCCR1A 	= 0x81;         //8-bit, Non-Inverted PWM
  dc:	81 e8       	ldi	r24, 0x81	; 129
  de:	8f bd       	out	0x2f, r24	; 47
        TCCR1B 	= 0x01;         //Start PWM
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	8e bd       	out	0x2e, r24	; 46
}
  e4:	08 95       	ret

000000e6 <main>:
#include 	<avr/iom16.h>
#include 	<avr/interrupt.h>

#define outp(a, b) b = a

int main(void) {
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	8f ea       	ldi	r24, 0xAF	; 175
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 49 00 	call	0x92	; 0x92 <motor1>
	
	for(;;){
		motor1(0xAF, 1);
		motor2(0xAF, 1);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	8f ea       	ldi	r24, 0xAF	; 175
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 5d 00 	call	0xba	; 0xba <motor2>
  fe:	f3 cf       	rjmp	.-26     	; 0xe6 <main>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
