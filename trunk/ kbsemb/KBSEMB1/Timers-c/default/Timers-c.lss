
Timers-c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000023  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b5  00000000  00000000  00000161  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000007b  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bc  00000000  00000000  00000291  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000084  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include   <avr/io.h>   //gcc
#include <avr\iom16.h>

#define outp(a, b) b = a

int main(void) {
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	87 bb       	out	0x17, r24	; 23

	outp((1<<PINB3), DDRB);

	/*set timer counter initial value*/

	TCNT1=0x00;
  96:	1d bc       	out	0x2d, r1	; 45
  98:	1c bc       	out	0x2c, r1	; 44

	/*Set timer output compare register*/

	OCR1A=0x80;
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	9b bd       	out	0x2b, r25	; 43
  a0:	8a bd       	out	0x2a, r24	; 42
	without presscaler

	Non inverted mode in OC2 pin;

	phase corect PWM*/
	TCCR1A = 0xC9;
  a2:	89 ec       	ldi	r24, 0xC9	; 201
  a4:	8f bd       	out	0x2f, r24	; 47
	//outp((1<<FOC1A)|(1<<COM1A0)|(1<<COM1A0)|(1<<WGM10), TCCR1A);
	TCCR1B = 0x01;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	8e bd       	out	0x2e, r24	; 46
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x18>

000000ac <pwm>:
	while(1){
	}
} 


void pwm(){
  ac:	88 e0       	ldi	r24, 0x08	; 8
  ae:	87 bb       	out	0x17, r24	; 23

	outp((1<<PINB3), DDRB);

	/*set timer counter initial value*/

	TCNT1=0x00;
  b0:	1d bc       	out	0x2d, r1	; 45
  b2:	1c bc       	out	0x2c, r1	; 44

	/*Set timer output compare register*/

	OCR1A=0x80;
  b4:	80 e8       	ldi	r24, 0x80	; 128
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	9b bd       	out	0x2b, r25	; 43
  ba:	8a bd       	out	0x2a, r24	; 42
	without presscaler

	Non inverted mode in OC2 pin;

	phase corect PWM*/
	TCCR1A = 0xC9;
  bc:	89 ec       	ldi	r24, 0xC9	; 201
  be:	8f bd       	out	0x2f, r24	; 47
	//outp((1<<FOC1A)|(1<<COM1A0)|(1<<COM1A0)|(1<<WGM10), TCCR1A);
	TCCR1B = 0x01;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	8e bd       	out	0x2e, r24	; 46
	//outp((1<<CS10), TCCR1B);

}
  c4:	08 95       	ret

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
