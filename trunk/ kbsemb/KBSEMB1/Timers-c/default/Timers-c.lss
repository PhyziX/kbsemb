
Timers-c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  000001a2  00000216  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000052  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000121  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000af  00000000  00000000  000003a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ee  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b5  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  0000075d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <forever>:
	// for(;;){ motor1(0x8F,1); }

} 

/* Start an endless loop  */
void forever(){
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8b bb       	out	0x1b, r24	; 27
	PORTA = 0xFF;
	forever();
  96:	0e 94 49 00 	call	0x92	; 0x92 <forever>
}
  9a:	08 95       	ret

0000009c <main>:
void forever();

int i = 0;

/* Initialize variables for interrupt */
int main(void) {
  9c:	f8 94       	cli
	TCNT1H 	= 0x00;		// Set high counter value to zero
	TCNT1L 	= 0x00;		// Set low counter value to zero
	sei(); */

	cli();
	TCCR2 = 0x22;
  9e:	82 e2       	ldi	r24, 0x22	; 34
  a0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0x08;
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	83 bd       	out	0x23, r24	; 35
	TIMSK = 0x80;
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	89 bf       	out	0x39, r24	; 57
	TCNT2 = 0x00;
  aa:	14 bc       	out	0x24, r1	; 36
	sei();
  ac:	78 94       	sei

	forever(); 			// Goto an endless loop
  ae:	0e 94 49 00 	call	0x92	; 0x92 <forever>
	
	// for(;;){ motor1(0x8F,1); }

} 
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <motor1>:
	
	TCNT2 = 0x00;		// Set counter value to zero		
}


void motor1(int speed, int direction){
  b8:	8a bd       	out	0x2a, r24	; 42
		OCR1AL = speed;
		OCR1AH = 0; 
  ba:	1b bc       	out	0x2b, r1	; 43
		
		if(direction == 1){
  bc:	61 30       	cpi	r22, 0x01	; 1
  be:	71 05       	cpc	r23, r1
  c0:	21 f4       	brne	.+8      	; 0xca <motor1+0x12>
			PORTD = 0x60;
  c2:	80 e6       	ldi	r24, 0x60	; 96
  c4:	82 bb       	out	0x12, r24	; 18
			DDRD = 0x60;
  c6:	81 bb       	out	0x11, r24	; 17
  c8:	0a c0       	rjmp	.+20     	; 0xde <motor1+0x26>
		}else if(direction == -1){
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	21 f4       	brne	.+8      	; 0xd8 <motor1+0x20>
			PORTD = 0xA0;
  d0:	80 ea       	ldi	r24, 0xA0	; 160
  d2:	82 bb       	out	0x12, r24	; 18
			DDRD = 0xA0;
  d4:	81 bb       	out	0x11, r24	; 17
  d6:	03 c0       	rjmp	.+6      	; 0xde <motor1+0x26>
		}else{
			PORTD = 0xE0;
  d8:	80 ee       	ldi	r24, 0xE0	; 224
  da:	82 bb       	out	0x12, r24	; 18
			DDRD = 0xE0;
  dc:	81 bb       	out	0x11, r24	; 17
		} 

		TCCR1A = 0x81;
  de:	81 e8       	ldi	r24, 0x81	; 129
  e0:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = 0x01;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8e bd       	out	0x2e, r24	; 46
			
}
  e6:	08 95       	ret

000000e8 <motor2>:


void motor2(int speed, int direction){
  e8:	88 bd       	out	0x28, r24	; 40
    	OCR1BL = speed;
		OCR1BH = 0; 
  ea:	19 bc       	out	0x29, r1	; 41
		PORTD = 0x10;
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	82 bb       	out	0x12, r24	; 18
		DDRD = 0x10;	// 10
  f0:	81 bb       	out	0x11, r24	; 17

		if(direction == 1){
  f2:	61 30       	cpi	r22, 0x01	; 1
  f4:	71 05       	cpc	r23, r1
  f6:	21 f4       	brne	.+8      	; 0x100 <motor2+0x18>
			PORTB = 0x01;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	88 bb       	out	0x18, r24	; 24
			DDRB = 0x01;
  fc:	87 bb       	out	0x17, r24	; 23
  fe:	0a c0       	rjmp	.+20     	; 0x114 <motor2+0x2c>
		}else if(direction == -1){
 100:	6f 5f       	subi	r22, 0xFF	; 255
 102:	7f 4f       	sbci	r23, 0xFF	; 255
 104:	21 f4       	brne	.+8      	; 0x10e <motor2+0x26>
			PORTB = 0x02;
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	88 bb       	out	0x18, r24	; 24
			DDRB = 0x02;
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	03 c0       	rjmp	.+6      	; 0x114 <motor2+0x2c>
		}else{
			PORTB = 0x03;
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	88 bb       	out	0x18, r24	; 24
			DDRB = 0x03;
 112:	87 bb       	out	0x17, r24	; 23
		} 

		TCCR1A = 0x21;
 114:	81 e2       	ldi	r24, 0x21	; 33
 116:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = 0x01;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	8e bd       	out	0x2e, r24	; 46
}
 11c:	08 95       	ret

0000011e <__vector_3>:
	PORTA = 0xFF;
	forever();
}

/* If an interrupt accures, execute this code */
ISR(TIMER2_COMP_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	if(i == 0){
 140:	80 91 60 00 	lds	r24, 0x0060
 144:	90 91 61 00 	lds	r25, 0x0061
 148:	89 2b       	or	r24, r25
 14a:	69 f4       	brne	.+26     	; 0x166 <__vector_3+0x48>
		motor1(0xFF, 1);	// Start motor 1 motorX(speed,direction);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 5c 00 	call	0xb8	; 0xb8 <motor1>
		i = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 61 00 	sts	0x0061, r25
 160:	80 93 60 00 	sts	0x0060, r24
 164:	0a c0       	rjmp	.+20     	; 0x17a <__vector_3+0x5c>
	}else{
		motor2(0xFF, 1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 74 00 	call	0xe8	; 0xe8 <motor2>
		i = 0;
 172:	10 92 61 00 	sts	0x0061, r1
 176:	10 92 60 00 	sts	0x0060, r1
	}
	
	TCNT2 = 0x00;		// Set counter value to zero		
 17a:	14 bc       	out	0x24, r1	; 36
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
