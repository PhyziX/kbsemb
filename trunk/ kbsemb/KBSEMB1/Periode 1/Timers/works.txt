#include   	<avr/io.h>
#include 	<avr/iom16.h>
#include 	<avr/interrupt.h>

void motor1(int,int);
void motor2(int,int);
void forever();

int i = 0;

/* Initialize variables for interrupt */
int main(void) {
	/* cli();
	
	TCCR1A 	= 0x80;		// Compare ouput mode
	TCCR1B 	= 0x01;		// Counter frequency
	OCR1AH 	= 0x01;		// Compare register high
	OCR1AL 	= 0x01;		// Compare register low
	TIMSK 	= 0x10;		// Set compare flag
	TCNT1H 	= 0x00;		// Set high counter value to zero
	TCNT1L 	= 0x00;		// Set low counter value to zero
	sei();

	forever(); 			// Goto an endless loop
	*/
	for(;;){ motor1(0x8F,1); }

} 

/* Start an endless loop  */
void forever(){
	PORTA = 0xFF;
	forever();
}

/* If an interrupt accures, execute this code */
ISR(TIMER1_COMPA_vect){
	if(i == 0){
		motor1(0x1F, 1);	// Start motor 1 motorX(speed,direction);
		i = 1;
	}else{
		motor2(0xFF, 1);
		i = 0;
	}
	
	
	TCNT1H = 0x00;		// Set high counter value to zero		
	TCNT1L = 0x00;		// Set low counter value to zero
}


void motor1(int speed, int direction){
		DDRD = 0x80;			// Set DDR bit (7 = OC2)
		OCR2 = speed;   		// Load Pulse width - 175
		if(direction == 1){		
			PORTD = 0x60;		// forward, bit 5(pwm1) & 6
		}else if(direction == -1){
			PORTD = 0xA0;		// backward, bit 5(pwm1) & 7
		}else{
			PORTD = 0xE0;		// brake, bit 5(pwm1) , 6 & 7
		}

        TCCR2 	= 0x61;         //8-bit, Non-Inverted PWM	
}


void motor2(int speed, int direction){
    	DDRD = 0x80;			// Set DDR bit (7 = OC2)
		PORTD = 0x10;			// Set PWM2 (bit 4)
		OCR2 = speed;   		// Load Pulse width - 175
		if(direction == 1){
			PORTB = 0x01;		// forward, bit 0
		}else if(direction == -1){
			PORTB = 0x02;		// backward, bit 1
		}else{
			PORTB = 0x03;		// brake, bit 0 & 1
		}

        TCCR2 	= 0x61;         //8-bit, Non-Inverted PWM
}

