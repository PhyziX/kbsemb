
algoritmeRob.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000490  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000490  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000136  00800062  00000492  00000506  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000179  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000927  00000000  00000000  0000069f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f5  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006e8  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000212  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d1  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d77  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_3>
  10:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  8a:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
void USART_Init();				
void USART_SendString(unsigned char *);
void USART_SendByte(unsigned char );
void send(int,int);

void USART_Init(){
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
	UBRRL = 0x33;	// Set baud rate (9600) for 8Mhz (ATMega16 datasheet) 
	UCSRC = 0x86;	// Set frame format to 8 data bits, no parity, 1 stop bits
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0x08; 	// Enable receiver and transmitter
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	8a b9       	out	0x0a, r24	; 10
}
  9e:	08 95       	ret

000000a0 <USART_SendString>:

void USART_SendString(unsigned char *string){
  a0:	fc 01       	movw	r30, r24
  a2:	04 c0       	rjmp	.+8      	; 0xac <USART_SendString+0xc>
		USART_SendByte(*string++);
	}
}

void USART_SendByte(unsigned char c){	
	while((UCSRA&(1<<UDRE)) == 0); // Wait if a byte is being transmitted
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <USART_SendString+0x4>
	UCSRB = 0x08; 	// Enable receiver and transmitter
}

void USART_SendString(unsigned char *string){
	while(*string){
		USART_SendByte(*string++);
  a8:	31 96       	adiw	r30, 0x01	; 1
	}
}

void USART_SendByte(unsigned char c){	
	while((UCSRA&(1<<UDRE)) == 0); // Wait if a byte is being transmitted
	UDR = c;	// Transmit data
  aa:	8c b9       	out	0x0c, r24	; 12
	UCSRC = 0x86;	// Set frame format to 8 data bits, no parity, 1 stop bits
	UCSRB = 0x08; 	// Enable receiver and transmitter
}

void USART_SendString(unsigned char *string){
	while(*string){
  ac:	80 81       	ld	r24, Z
  ae:	88 23       	and	r24, r24
  b0:	c9 f7       	brne	.-14     	; 0xa4 <USART_SendString+0x4>
		USART_SendByte(*string++);
	}
}
  b2:	08 95       	ret

000000b4 <USART_SendByte>:

void USART_SendByte(unsigned char c){	
  b4:	5d 9b       	sbis	0x0b, 5	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <USART_SendByte>
	while((UCSRA&(1<<UDRE)) == 0); // Wait if a byte is being transmitted
	UDR = c;	// Transmit data
  b8:	8c b9       	out	0x0c, r24	; 12
}
  ba:	08 95       	ret

000000bc <send>:

void send(int x, int y){
  bc:	28 2f       	mov	r18, r24
		USART_SendByte(*string++);
	}
}

void USART_SendByte(unsigned char c){	
	while((UCSRA&(1<<UDRE)) == 0); // Wait if a byte is being transmitted
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <send+0x2>
	UDR = c;	// Transmit data
  c2:	85 e6       	ldi	r24, 0x65	; 101
  c4:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	9a ee       	ldi	r25, 0xEA	; 234
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <send+0xe>
		USART_SendByte(*string++);
	}
}

void USART_SendByte(unsigned char c){	
	while((UCSRA&(1<<UDRE)) == 0); // Wait if a byte is being transmitted
  ce:	5d 9b       	sbis	0x0b, 5	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <send+0x12>
	UDR = c;	// Transmit data
  d2:	2c b9       	out	0x0c, r18	; 12
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	9a ee       	ldi	r25, 0xEA	; 234
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <send+0x1c>
		USART_SendByte(*string++);
	}
}

void USART_SendByte(unsigned char c){	
	while((UCSRA&(1<<UDRE)) == 0); // Wait if a byte is being transmitted
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <send+0x20>
	UDR = c;	// Transmit data
  e0:	86 e6       	ldi	r24, 0x66	; 102
  e2:	8c b9       	out	0x0c, r24	; 12
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	9a ee       	ldi	r25, 0xEA	; 234
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <send+0x2c>
		USART_SendByte(*string++);
	}
}

void USART_SendByte(unsigned char c){	
	while((UCSRA&(1<<UDRE)) == 0); // Wait if a byte is being transmitted
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <send+0x30>
	UDR = c;	// Transmit data
  f0:	6c b9       	out	0x0c, r22	; 12
  f2:	80 e6       	ldi	r24, 0x60	; 96
  f4:	9a ee       	ldi	r25, 0xEA	; 234
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <send+0x3a>
	_delay_ms(30.0);
	USART_SendByte(102);
	_delay_ms(30.0);
	USART_SendByte(y);
	_delay_ms(30.0);
}
  fa:	08 95       	ret

000000fc <motor1>:

	Last edited:	11-12-2008
	Created by:		Windesheim, M3TI, Groep 2
*/

void motor1(int speed, int direction){
  fc:	8a bd       	out	0x2a, r24	; 42
		OCR1AL = speed;			// Save speed in OCR1AL
		OCR1AH = 0; 
  fe:	1b bc       	out	0x2b, r1	; 43
		
		if(direction == 1){			// If forward
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	71 05       	cpc	r23, r1
 104:	11 f4       	brne	.+4      	; 0x10a <motor1+0xe>
			PORTD = 0x70;			// PWM1,PWM2 & Forward bit
 106:	80 e7       	ldi	r24, 0x70	; 112
 108:	06 c0       	rjmp	.+12     	; 0x116 <motor1+0x1a>
		}else if(direction == -1){		// If backward
 10a:	6f 5f       	subi	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	11 f4       	brne	.+4      	; 0x114 <motor1+0x18>
			PORTD = 0xB0;			// PWM1,PWM2 & Backward bit
 110:	80 eb       	ldi	r24, 0xB0	; 176
 112:	01 c0       	rjmp	.+2      	; 0x116 <motor1+0x1a>
		}else{					// Else, stop
			PORTD = 0xF0;			// PWM1,PWM2 & Forward & backward bit
 114:	80 ef       	ldi	r24, 0xF0	; 240
 116:	82 bb       	out	0x12, r24	; 18
 118:	08 95       	ret

0000011a <motor2>:
		} 
}

void motor2(int speed, int direction){
 11a:	88 bd       	out	0x28, r24	; 40
		OCR1BL = speed;			// Save speed in OCR1BL
		OCR1BH = 0; 
 11c:	19 bc       	out	0x29, r1	; 41
		if(direction == 1){			// If forward
 11e:	61 30       	cpi	r22, 0x01	; 1
 120:	71 05       	cpc	r23, r1
 122:	11 f4       	brne	.+4      	; 0x128 <motor2+0xe>
			PORTB = 0x02;			// Forward bit
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	06 c0       	rjmp	.+12     	; 0x134 <motor2+0x1a>
		}else if(direction == -1){		// If backward
 128:	6f 5f       	subi	r22, 0xFF	; 255
 12a:	7f 4f       	sbci	r23, 0xFF	; 255
 12c:	11 f4       	brne	.+4      	; 0x132 <motor2+0x18>
			PORTB = 0x01;			// Backward bit
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	01 c0       	rjmp	.+2      	; 0x134 <motor2+0x1a>
		}else{					// Else, stop
			PORTB = 0x03;			// Forward & backward bit
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	88 bb       	out	0x18, r24	; 24
 136:	08 95       	ret

00000138 <sensor1>:
int distance = 0;				// measured distance with ultrasone sensor

int sensor1(){					
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	84 bb       	out	0x14, r24	; 20
	// Output pulse to Ping))) - Trigger pulse
	DDRC = (1 << PC2);			// Set port as to output
	PORTC = (1 << PC2);			// Set port high
 13c:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 13e:	8d e0       	ldi	r24, 0x0D	; 13
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <sensor1+0x8>
    _delay_us(5); 				// Wait 5 microseconds
        					// Bring pin to high input 
    DDRC = (0 << PC2);			// Set port as input
 144:	14 ba       	out	0x14, r1	; 20
	PORTC = (0 << PC2);			// Set port low
 146:	15 ba       	out	0x15, r1	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 148:	8c ed       	ldi	r24, 0xDC	; 220
 14a:	95 e0       	ldi	r25, 0x05	; 5
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <sensor1+0x14>
    _delay_us(750); 			// Wait 750 microseconds
       						// Wait for pin to go high 
    loop_until_bit_is_set(PINC, PINC2); 
 150:	9a 9b       	sbis	0x13, 2	; 19
 152:	fe cf       	rjmp	.-4      	; 0x150 <sensor1+0x18>
    TCNT0 = 0; 					// Start counter
 154:	12 be       	out	0x32, r1	; 50
       						// Wait for pin to go low 
    loop_until_bit_is_clear(PINC, PINC2);
 156:	9a 99       	sbic	0x13, 2	; 19
 158:	fe cf       	rjmp	.-4      	; 0x156 <sensor1+0x1e>
    distance = TCNT0 / 1,90;	// TCNT0 divide by 1,90 to get distance in cm
 15a:	82 b7       	in	r24, 0x32	; 50
 15c:	80 93 6e 00 	sts	0x006E, r24
 160:	10 92 6f 00 	sts	0x006F, r1
 164:	e0 e9       	ldi	r30, 0x90	; 144
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <sensor1+0x30>
    _delay_us(200); 			// Wait 200 micro seconds for next measurement
	
	return distance;
}
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	08 95       	ret

00000170 <sensor2>:

int sensor2(){					
 170:	88 e0       	ldi	r24, 0x08	; 8
 172:	84 bb       	out	0x14, r24	; 20
	// Output pulse to Ping))) - Trigger pulse
	DDRC = (1 << PC3);			// Set port as to output
	PORTC = (1 << PC3);			// Set port high
 174:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 176:	8d e0       	ldi	r24, 0x0D	; 13
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <sensor2+0x8>
    _delay_us(5); 				// Wait 5 microseconds
        					// Bring pin to high input 
    DDRC = (0 << PC3);			// Set port as input
 17c:	14 ba       	out	0x14, r1	; 20
	PORTC = (0 << PC3);			// Set port low
 17e:	15 ba       	out	0x15, r1	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 180:	8c ed       	ldi	r24, 0xDC	; 220
 182:	95 e0       	ldi	r25, 0x05	; 5
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <sensor2+0x14>
    _delay_us(750); 			// Wait 750 microseconds
       						// Wait for pin to go high 
    loop_until_bit_is_set(PINC, PINC3); 
 188:	9b 9b       	sbis	0x13, 3	; 19
 18a:	fe cf       	rjmp	.-4      	; 0x188 <sensor2+0x18>
    TCNT0 = 0; 					// Start counter
 18c:	12 be       	out	0x32, r1	; 50
       						// Wait for pin to go low 
    loop_until_bit_is_clear(PINC, PINC3);
 18e:	9b 99       	sbic	0x13, 3	; 19
 190:	fe cf       	rjmp	.-4      	; 0x18e <sensor2+0x1e>
    distance = TCNT0 / 1,90;	// TCNT0 divide by 1,90 to get distance in cm
 192:	82 b7       	in	r24, 0x32	; 50
 194:	80 93 6e 00 	sts	0x006E, r24
 198:	10 92 6f 00 	sts	0x006F, r1
 19c:	e0 e9       	ldi	r30, 0x90	; 144
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <sensor2+0x30>
    _delay_us(200); 			// Wait 200 micro seconds for next measurement
	
	return distance;
}
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <sensor3>:

int sensor3(){					
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	84 bb       	out	0x14, r24	; 20
	// Output pulse to Ping))) - Trigger pulse
	DDRC = (1 << PC4);			// Set port as to output
	PORTC = (1 << PC4);			// Set port high
 1ac:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ae:	8d e0       	ldi	r24, 0x0D	; 13
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <sensor3+0x8>
    _delay_us(5); 				// Wait 5 microseconds
        					// Bring pin to high input 
    DDRC = (0 << PC4);			// Set port as input
 1b4:	14 ba       	out	0x14, r1	; 20
	PORTC = (0 << PC4);			// Set port low
 1b6:	15 ba       	out	0x15, r1	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b8:	8c ed       	ldi	r24, 0xDC	; 220
 1ba:	95 e0       	ldi	r25, 0x05	; 5
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <sensor3+0x14>
    _delay_us(750); 			// Wait 750 microseconds
       						// Wait for pin to go high 
    loop_until_bit_is_set(PINC, PINC4); 
 1c0:	9c 9b       	sbis	0x13, 4	; 19
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <sensor3+0x18>
    TCNT0 = 0; 					// Start counter
 1c4:	12 be       	out	0x32, r1	; 50
       						// Wait for pin to go low 
    loop_until_bit_is_clear(PINC, PINC4);
 1c6:	9c 99       	sbic	0x13, 4	; 19
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <sensor3+0x1e>
    distance = TCNT0 / 1,90;	// TCNT0 divide by 1,90 to get distance in cm
 1ca:	82 b7       	in	r24, 0x32	; 50
 1cc:	80 93 6e 00 	sts	0x006E, r24
 1d0:	10 92 6f 00 	sts	0x006F, r1
 1d4:	e0 e9       	ldi	r30, 0x90	; 144
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <sensor3+0x30>
    _delay_us(200); 			// Wait 200 micro seconds for next measurement
	
	return distance;
}
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	08 95       	ret

000001e0 <main>:
int lastPosX;	//houdt bij wat het X-cor was van de laatste plek
int lastPosY;	//houdt bij wat het Y-cor was van de laatste plek
int curPosArray [12][12];	// Array van de plaats waar de robot is
int i, j;	// teller voor for-loop

int main(int argc, char** argv) {
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 75 00 	sts	0x0075, r25
 1e8:	80 93 74 00 	sts	0x0074, r24
	
	curPosX = 6;
	curPosY = 6;
 1ec:	90 93 6d 00 	sts	0x006D, r25
 1f0:	80 93 6c 00 	sts	0x006C, r24
 1f4:	80 91 6a 00 	lds	r24, 0x006A
 1f8:	90 91 6b 00 	lds	r25, 0x006B
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
	for(i = 0; i <= 12; i++){
		for(j = 0; j <= 12; j++){
			curPosArray[i][j] = 15;	// bin: 1111 // (nozw)  dit betekent dat voor elk vakje het nog mogelijk is om naar nozw te gaan 
 200:	4f e0       	ldi	r20, 0x0F	; 15
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	19 c0       	rjmp	.+50     	; 0x238 <main+0x58>

int main(int argc, char** argv) {
	
	curPosX = 6;
	curPosY = 6;
	for(i = 0; i <= 12; i++){
 206:	f9 01       	movw	r30, r18
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	e2 0f       	add	r30, r18
 20e:	f3 1f       	adc	r31, r19
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	ee 0f       	add	r30, r30
 214:	ff 1f       	adc	r31, r31
 216:	8a 95       	dec	r24
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x32>
 21a:	ea 58       	subi	r30, 0x8A	; 138
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <main+0x48>
		for(j = 0; j <= 12; j++){
			curPosArray[i][j] = 15;	// bin: 1111 // (nozw)  dit betekent dat voor elk vakje het nog mogelijk is om naar nozw te gaan 
 224:	41 93       	st	Z+, r20
 226:	51 93       	st	Z+, r21
 228:	01 96       	adiw	r24, 0x01	; 1
int main(int argc, char** argv) {
	
	curPosX = 6;
	curPosY = 6;
	for(i = 0; i <= 12; i++){
		for(j = 0; j <= 12; j++){
 22a:	8e 30       	cpi	r24, 0x0E	; 14
 22c:	91 05       	cpc	r25, r1
 22e:	d1 f7       	brne	.-12     	; 0x224 <main+0x44>
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	8d e0       	ldi	r24, 0x0D	; 13
 236:	90 e0       	ldi	r25, 0x00	; 0

int main(int argc, char** argv) {
	
	curPosX = 6;
	curPosY = 6;
	for(i = 0; i <= 12; i++){
 238:	2d 30       	cpi	r18, 0x0D	; 13
 23a:	31 05       	cpc	r19, r1
 23c:	24 f3       	brlt	.-56     	; 0x206 <main+0x26>
 23e:	90 93 6b 00 	sts	0x006B, r25
 242:	80 93 6a 00 	sts	0x006A, r24
 246:	30 93 73 00 	sts	0x0073, r19
 24a:	20 93 72 00 	sts	0x0072, r18
		for(j = 0; j <= 12; j++){
			curPosArray[i][j] = 15;	// bin: 1111 // (nozw)  dit betekent dat voor elk vakje het nog mogelijk is om naar nozw te gaan 
		}
	}
	
	lastDistanceToWall = sensor1();
 24e:	0e 94 9c 00 	call	0x138	; 0x138 <sensor1>
 252:	90 93 67 00 	sts	0x0067, r25
 256:	80 93 66 00 	sts	0x0066, r24


	cli();						// Disable interrupts
 25a:	f8 94       	cli
}

/* Initialize variables for interrupt */
void init(){
	// Set values for timer/counter2 (interrupt)
		TCCR2 = 0x02;			// COM20 & CS21
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	85 bd       	out	0x25, r24	; 37
		OCR2 = 0xFD;			// fc Output compare 
 260:	8d ef       	ldi	r24, 0xFD	; 253
 262:	83 bd       	out	0x23, r24	; 35
		TIMSK = 0xC0;			// Set compare flag, overflow & compare
 264:	80 ec       	ldi	r24, 0xC0	; 192
 266:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0xFB;			// Reset counter
 268:	8b ef       	ldi	r24, 0xFB	; 251
 26a:	84 bd       	out	0x24, r24	; 36
	
	// Set values for timer/counter1 (motors)
		TCCR1A = 0xA1;			// Set COM1A1, COM1B1 & WGM10
 26c:	81 ea       	ldi	r24, 0xA1	; 161
 26e:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = 0x01;			// CS10
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	8e bd       	out	0x2e, r24	; 46

	// Set values for timer/counter0 (ultrasone sensors)
		TCCR0 = 0x04;			// Set frequency at 256
 274:	84 e0       	ldi	r24, 0x04	; 4
 276:	83 bf       	out	0x33, r24	; 51
	
	// Set PWM signal for motors
		PORTD = 0x34;			// Set PWM1 & PWM2 signal
 278:	84 e3       	ldi	r24, 0x34	; 52
 27a:	82 bb       	out	0x12, r24	; 18
		DDRD = 0x34;			// Set PWM1 & PWM2 signal
 27c:	81 bb       	out	0x11, r24	; 17

	// Onboard leds off
		DDRB = 0xFF;
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	87 bb       	out	0x17, r24	; 23
void USART_SendString(unsigned char *);
void USART_SendByte(unsigned char );
void send(int,int);

void USART_Init(){
	UBRRL = 0x33;	// Set baud rate (9600) for 8Mhz (ATMega16 datasheet) 
 282:	83 e3       	ldi	r24, 0x33	; 51
 284:	89 b9       	out	0x09, r24	; 9
	UCSRC = 0x86;	// Set frame format to 8 data bits, no parity, 1 stop bits
 286:	86 e8       	ldi	r24, 0x86	; 134
 288:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0x08; 	// Enable receiver and transmitter
 28a:	88 e0       	ldi	r24, 0x08	; 8
 28c:	8a b9       	out	0x0a, r24	; 10
		USART_SendByte(*string++);
	}
}

void USART_SendByte(unsigned char c){	
	while((UCSRA&(1<<UDRE)) == 0); // Wait if a byte is being transmitted
 28e:	5d 9b       	sbis	0x0b, 5	; 11
 290:	fe cf       	rjmp	.-4      	; 0x28e <main+0xae>
	UDR = c;	// Transmit data
 292:	84 e6       	ldi	r24, 0x64	; 100
 294:	8c b9       	out	0x0c, r24	; 12

	cli();						// Disable interrupts
	init();						// Initialize variables for interrupt
	USART_Init();				// Initialize USART variables
	USART_SendByte(100);
	sei();						// Enable interrupts
 296:	78 94       	sei

/* Start an endless loop  */
void forever(){
	if(bit_is_set(PINB, 4)){	
		while(bit_is_set(PINB, 4)){}		
		mSpeed = 0xA0;
 298:	20 ea       	ldi	r18, 0xA0	; 160
 29a:	30 e0       	ldi	r19, 0x00	; 0
		direction1 = 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
	return 0;
} 

/* Start an endless loop  */
void forever(){
	if(bit_is_set(PINB, 4)){	
 2a0:	b4 9b       	sbis	0x16, 4	; 22
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <main+0xc0>
		while(bit_is_set(PINB, 4)){}		
 2a4:	b4 99       	sbic	0x16, 4	; 22
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <main+0xc4>
		mSpeed = 0xA0;
 2a8:	30 93 61 00 	sts	0x0061, r19
 2ac:	20 93 60 00 	sts	0x0060, r18
		direction1 = 1;
 2b0:	90 93 63 00 	sts	0x0063, r25
 2b4:	80 93 62 00 	sts	0x0062, r24
		direction2 = 1;
 2b8:	90 93 65 00 	sts	0x0065, r25
 2bc:	80 93 64 00 	sts	0x0064, r24
 2c0:	ef cf       	rjmp	.-34     	; 0x2a0 <main+0xc0>

000002c2 <forever>:
	forever(); 					// Goto an endless loop
	return 0;
} 

/* Start an endless loop  */
void forever(){
 2c2:	20 ea       	ldi	r18, 0xA0	; 160
 2c4:	30 e0       	ldi	r19, 0x00	; 0
	if(bit_is_set(PINB, 4)){	
		while(bit_is_set(PINB, 4)){}		
		mSpeed = 0xA0;
		direction1 = 1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
	return 0;
} 

/* Start an endless loop  */
void forever(){
	if(bit_is_set(PINB, 4)){	
 2ca:	b4 9b       	sbis	0x16, 4	; 22
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <forever+0x8>
		while(bit_is_set(PINB, 4)){}		
 2ce:	b4 99       	sbic	0x16, 4	; 22
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <forever+0xc>
		mSpeed = 0xA0;
 2d2:	30 93 61 00 	sts	0x0061, r19
 2d6:	20 93 60 00 	sts	0x0060, r18
		direction1 = 1;
 2da:	90 93 63 00 	sts	0x0063, r25
 2de:	80 93 62 00 	sts	0x0062, r24
		direction2 = 1;
 2e2:	90 93 65 00 	sts	0x0065, r25
 2e6:	80 93 64 00 	sts	0x0064, r24
 2ea:	ef cf       	rjmp	.-34     	; 0x2ca <forever+0x8>

000002ec <init>:
	}
	forever();					// Start an endless loop
}

/* Initialize variables for interrupt */
void init(){
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	85 bd       	out	0x25, r24	; 37
	// Set values for timer/counter2 (interrupt)
		TCCR2 = 0x02;			// COM20 & CS21
		OCR2 = 0xFD;			// fc Output compare 
 2f0:	8d ef       	ldi	r24, 0xFD	; 253
 2f2:	83 bd       	out	0x23, r24	; 35
		TIMSK = 0xC0;			// Set compare flag, overflow & compare
 2f4:	80 ec       	ldi	r24, 0xC0	; 192
 2f6:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0xFB;			// Reset counter
 2f8:	8b ef       	ldi	r24, 0xFB	; 251
 2fa:	84 bd       	out	0x24, r24	; 36
	
	// Set values for timer/counter1 (motors)
		TCCR1A = 0xA1;			// Set COM1A1, COM1B1 & WGM10
 2fc:	81 ea       	ldi	r24, 0xA1	; 161
 2fe:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = 0x01;			// CS10
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	8e bd       	out	0x2e, r24	; 46

	// Set values for timer/counter0 (ultrasone sensors)
		TCCR0 = 0x04;			// Set frequency at 256
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	83 bf       	out	0x33, r24	; 51
	
	// Set PWM signal for motors
		PORTD = 0x34;			// Set PWM1 & PWM2 signal
 308:	84 e3       	ldi	r24, 0x34	; 52
 30a:	82 bb       	out	0x12, r24	; 18
		DDRD = 0x34;			// Set PWM1 & PWM2 signal
 30c:	81 bb       	out	0x11, r24	; 17

	// Onboard leds off
		DDRB = 0xFF;
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	87 bb       	out	0x17, r24	; 23
}
 312:	08 95       	ret

00000314 <__vector_4>:

// Interrupt routine: Overflow
ISR(TIMER2_OVF_vect){					
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	ef 92       	push	r14
 320:	ff 92       	push	r15
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	motor1(mSpeed, direction1);		// Start motor1
 342:	20 91 62 00 	lds	r18, 0x0062
 346:	30 91 63 00 	lds	r19, 0x0063
 34a:	80 91 60 00 	lds	r24, 0x0060
 34e:	90 91 61 00 	lds	r25, 0x0061
	Last edited:	11-12-2008
	Created by:		Windesheim, M3TI, Groep 2
*/

void motor1(int speed, int direction){
		OCR1AL = speed;			// Save speed in OCR1AL
 352:	8a bd       	out	0x2a, r24	; 42
		OCR1AH = 0; 
 354:	1b bc       	out	0x2b, r1	; 43
		
		if(direction == 1){			// If forward
 356:	21 30       	cpi	r18, 0x01	; 1
 358:	31 05       	cpc	r19, r1
 35a:	11 f4       	brne	.+4      	; 0x360 <__vector_4+0x4c>
			PORTD = 0x70;			// PWM1,PWM2 & Forward bit
 35c:	80 e7       	ldi	r24, 0x70	; 112
 35e:	06 c0       	rjmp	.+12     	; 0x36c <__vector_4+0x58>
		}else if(direction == -1){		// If backward
 360:	2f 5f       	subi	r18, 0xFF	; 255
 362:	3f 4f       	sbci	r19, 0xFF	; 255
 364:	11 f4       	brne	.+4      	; 0x36a <__vector_4+0x56>
			PORTD = 0xB0;			// PWM1,PWM2 & Backward bit
 366:	80 eb       	ldi	r24, 0xB0	; 176
 368:	01 c0       	rjmp	.+2      	; 0x36c <__vector_4+0x58>
		}else{					// Else, stop
			PORTD = 0xF0;			// PWM1,PWM2 & Forward & backward bit
 36a:	80 ef       	ldi	r24, 0xF0	; 240
 36c:	82 bb       	out	0x12, r24	; 18
	
	curDistanceToWall = sensor1();
 36e:	0e 94 9c 00 	call	0x138	; 0x138 <sensor1>
 372:	9c 01       	movw	r18, r24
 374:	90 93 69 00 	sts	0x0069, r25
 378:	80 93 68 00 	sts	0x0068, r24
	if(lastDistanceToWall - curDistanceToWall >= 20){
 37c:	80 91 66 00 	lds	r24, 0x0066
 380:	90 91 67 00 	lds	r25, 0x0067
 384:	82 1b       	sub	r24, r18
 386:	93 0b       	sbc	r25, r19
 388:	44 97       	sbiw	r24, 0x14	; 20
 38a:	e4 f0       	brlt	.+56     	; 0x3c4 <__vector_4+0xb0>
		lastPosX = curPosX;
 38c:	80 91 74 00 	lds	r24, 0x0074
 390:	90 91 75 00 	lds	r25, 0x0075
 394:	90 93 97 01 	sts	0x0197, r25
 398:	80 93 96 01 	sts	0x0196, r24
		lastPosY = curPosY;
 39c:	60 91 6c 00 	lds	r22, 0x006C
 3a0:	70 91 6d 00 	lds	r23, 0x006D
 3a4:	70 93 71 00 	sts	0x0071, r23
 3a8:	60 93 70 00 	sts	0x0070, r22
		lastDistanceToWall = curDistanceToWall;
 3ac:	30 93 67 00 	sts	0x0067, r19
 3b0:	20 93 66 00 	sts	0x0066, r18
		curPosY++;
 3b4:	6f 5f       	subi	r22, 0xFF	; 255
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	70 93 6d 00 	sts	0x006D, r23
 3bc:	60 93 6c 00 	sts	0x006C, r22
		send(curPosX,curPosY);
 3c0:	0e 94 5e 00 	call	0xbc	; 0xbc <send>
 3c4:	00 e0       	ldi	r16, 0x00	; 0
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	c1 e0       	ldi	r28, 0x01	; 1
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	20 e1       	ldi	r18, 0x10	; 16
 3ce:	e2 2e       	mov	r14, r18
 3d0:	27 e2       	ldi	r18, 0x27	; 39
 3d2:	f2 2e       	mov	r15, r18
 3d4:	c7 01       	movw	r24, r14
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <__vector_4+0xc2>

	int i;
	int j = 1;
	for(i = 0; i < 5; i++){
		_delay_ms(5);
		distance = sensor1();		// Read sensor 1, returns distance in cm
 3da:	0e 94 9c 00 	call	0x138	; 0x138 <sensor1>
 3de:	90 93 6f 00 	sts	0x006F, r25
 3e2:	80 93 6e 00 	sts	0x006E, r24
		if(distance <= 7){
 3e6:	08 97       	sbiw	r24, 0x08	; 8
 3e8:	0c f4       	brge	.+2      	; 0x3ec <__vector_4+0xd8>
			j++;
 3ea:	21 96       	adiw	r28, 0x01	; 1
		send(curPosX,curPosY);
	}

	int i;
	int j = 1;
	for(i = 0; i < 5; i++){
 3ec:	0f 5f       	subi	r16, 0xFF	; 255
 3ee:	1f 4f       	sbci	r17, 0xFF	; 255
 3f0:	05 30       	cpi	r16, 0x05	; 5
 3f2:	11 05       	cpc	r17, r1
 3f4:	79 f7       	brne	.-34     	; 0x3d4 <__vector_4+0xc0>
		distance = sensor1();		// Read sensor 1, returns distance in cm
		if(distance <= 7){
			j++;
		}
	}
	if(j == 5){
 3f6:	25 97       	sbiw	r28, 0x05	; 5
 3f8:	41 f4       	brne	.+16     	; 0x40a <__vector_4+0xf6>
		direction1 = 0;
 3fa:	10 92 63 00 	sts	0x0063, r1
 3fe:	10 92 62 00 	sts	0x0062, r1
		direction2 = 0;
 402:	10 92 65 00 	sts	0x0065, r1
 406:	10 92 64 00 	sts	0x0064, r1
	}
	TCNT2 = 0xFB;					// Set counter value 
 40a:	8b ef       	ldi	r24, 0xFB	; 251
 40c:	84 bd       	out	0x24, r24	; 36
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <__vector_3>:

// Interrupt routine: Compare
ISR(TIMER2_COMP_vect){
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
	motor2(mSpeed, direction2);		// Start motor2
 44e:	20 91 64 00 	lds	r18, 0x0064
 452:	30 91 65 00 	lds	r19, 0x0065
 456:	80 91 60 00 	lds	r24, 0x0060
 45a:	90 91 61 00 	lds	r25, 0x0061
		} 
}

void motor2(int speed, int direction){
		OCR1BL = speed;			// Save speed in OCR1BL
 45e:	88 bd       	out	0x28, r24	; 40
		OCR1BH = 0; 
 460:	19 bc       	out	0x29, r1	; 41
		if(direction == 1){			// If forward
 462:	21 30       	cpi	r18, 0x01	; 1
 464:	31 05       	cpc	r19, r1
 466:	11 f4       	brne	.+4      	; 0x46c <__stack+0xd>
			PORTB = 0x02;			// Forward bit
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	06 c0       	rjmp	.+12     	; 0x478 <__stack+0x19>
		}else if(direction == -1){		// If backward
 46c:	2f 5f       	subi	r18, 0xFF	; 255
 46e:	3f 4f       	sbci	r19, 0xFF	; 255
 470:	11 f4       	brne	.+4      	; 0x476 <__stack+0x17>
			PORTB = 0x01;			// Backward bit
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	01 c0       	rjmp	.+2      	; 0x478 <__stack+0x19>
		}else{					// Else, stop
			PORTB = 0x03;			// Forward & backward bit
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	88 bb       	out	0x18, r24	; 24
}
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
